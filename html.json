{
  "hash": "ae11365eb6a24a2eb0d9dc36a5eef983",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Code\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#libraries\nlibrary(tidyverse) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr) \nlibrary(readr)\nlibrary(maps)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'maps'\n\nThe following object is masked from 'package:purrr':\n\n    map\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mapproj)\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n:::\n\n\n#libraries\nlibrary(tidyverse) \nlibrary(dplyr) \nlibrary(readr)\nlibrary(maps)\nlibrary(mapproj)\nlibrary(plotly)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhw <- theme_gray()+ theme(\n  plot.title=element_text(hjust=0.5),\n  plot.subtitle=element_text(hjust=0.5),\n  plot.caption=element_text(hjust=-.5),\n  \n  strip.text.y = element_blank(),\n  strip.background=element_rect(fill=rgb(.9,.95,1),\n                                colour=gray(.5), linewidth =.2),\n  \n  panel.border=element_rect(fill=FALSE,colour=gray(.70)),\n  panel.grid.minor.y = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.spacing.x = unit(0.10,\"cm\"),\n  panel.spacing.y = unit(0.05,\"cm\"),\n  \n  # axis.ticks.y= element_blank()\n  axis.ticks=element_blank(),\n  axis.text=element_text(colour=\"black\"),\n  axis.text.y=element_text(margin=margin(0,3,0,3)),\n  axis.text.x=element_text(margin=margin(-1,0,3,0))\n)\n```\n:::\n\n\n\n#theme\nhw <- theme_gray()+ theme(\n  plot.title=element_text(hjust=0.5),\n  plot.subtitle=element_text(hjust=0.5),\n  plot.caption=element_text(hjust=-.5),\n  \n  strip.text.y = element_blank(),\n  strip.background=element_rect(fill=rgb(.9,.95,1),\n                                colour=gray(.5), linewidth =.2),\n  \n  panel.border=element_rect(fill=FALSE,colour=gray(.70)),\n  panel.grid.minor.y = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.spacing.x = unit(0.10,\"cm\"),\n  panel.spacing.y = unit(0.05,\"cm\"),\n  \n  # axis.ticks.y= element_blank()\n  axis.ticks=element_blank(),\n  axis.text=element_text(colour=\"black\"),\n  axis.text.y=element_text(margin=margin(0,3,0,3)),\n  axis.text.x=element_text(margin=margin(-1,0,3,0))\n)\n\n#load state abbrevations\nstates <- read.csv(\"statess.csv\") \n\n#load data and cbind abbrevations\njob <- read.csv(\"dataset1.csv\") %>%\n  inner_join(states, by.x = states, by.y = state)\n\njoba <- cbind(job, Abbreviation = states$Abbreviation)\n\n\nggplot(data = joba, aes(x=State, y=job_loss))+\n  geom_bar(stat=\"identity\", color=\"blue\", fill=\"white\")\n\n#changing column names\nnames(joba) \nnames(joba) [2] <- \"job_loss\"\nnames(joba) [3] <- \"job_gains\"\n\n#bar graph in plotly\n\nplot_ly(\n  data = joba,\n  x= ~State,\n  y = ~job_loss,\n  type = \"bar\",\n  name = \"Job loss\"\n) %>%\n  add_trace(y=~job_gains, name = \"job gain\")\n\n\n#map bar of job loss\n\n states <- map_data(\"state\")\n\n view(states)\n rm(joba)\n \n joba$State <- tolower(joba$State)\n joba$job_losses =  joba$job_loss / 100\n usa_jobloss <- usa_tbl %>%\n   left_join(joba, by = c(\"region\"= \"State\"))%>%\n   \n \n usa_jobloss\n\n \n usa_jobloss %>%\n   ggplot(aes(long, lat, group = group)) +\n   geom_map(\n     aes(map_id = region),\n     map = usa_tbl,\n     color = \"gray80\", fill = \"gray30\", size = 0.3)+\n   coord_map(\"ortho\", orientation = c(39, -98, 0)) +\n   geom_polygon(aes( fill = job_loss), color = \"black\") +\n   theme_minimal() +\n   labs( title = \"Job Loss in USA\",x = \"\", y = \"\", fill = \"Job Loss per state\") +\n   theme(\n     plot.title = element_text(size = 26, face = \"bold\", color = \"blue\"),\n     legend.position = \"left\")\n \n usa_jobloss %>%\n   ggplot(aes(long, lat, group = group)) +\n   geom_map(\n     aes(map_id = region),\n     map = usa_tbl,\n     color = \"gray80\", fill = \"gray30\", size = 0.3)+\n   coord_map(\"ortho\", orientation = c(39, -98, 0)) +\n   geom_polygon(aes( fill = job_gains), color = \"black\") +\n   theme_minimal() +\n   labs( title = \"Job Gain in USA\",x = \"\", y = \"\", fill = \"Job gain per state\") +\n   theme(\n     plot.title = element_text(size = 26, face = \"bold\", color = \"blue\"),\n     legend.position = \"left\")\n \n #dataset1 completed\n \n datasett <- read.csv(\"dataset3.csv\") \n \nrm(dataset)\n\n#to remove null values\n\n dataset <- na.omit(datasett)\n \n names(dataset)\n names(dataset)[4] <- \"Employment_level\"\n \n #bar chart with hours output in industry\n plot_ly(\n   data = dataset,\n   x= ~Industry,\n   y = ~Hours,\n   type = \"bar\",\n   name = \"Hours\"\n ) %>%\n   add_trace(y=~Output, name = \"Output\")\n \n plot_ly(\n   data = dataset,\n   x= ~Industry,\n   y = ~Employment_level,\n   type = \"bar\",\n   name = \"Employment level\"\n) \n\n \n \n plot_ly(\n     data = dataset, \n     y= ~Hours,\n     type = \"scatter\",\n     mode = 'scatt',\n     name = \"Hours\"\n   )%>%\n     add_trace(y=~Output, name = \"Output\",mode =\"lines+markers\")\n\n \n plot_ly(\n   data = dataset, \n   y= ~Employment_level,\n   type = \"scatter\",\n   mode = 'lines',\n   name = \"Hours\"\n ) \n ",
    "supporting": [
      "Code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}